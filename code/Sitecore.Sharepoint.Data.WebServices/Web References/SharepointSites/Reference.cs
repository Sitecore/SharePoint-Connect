//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Sitecore.Sharepoint.Data.WebServices.SharepointSites {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SitesSoap", Namespace="http://schemas.microsoft.com/sharepoint/soap/")]
    public partial class Sites : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetSiteTemplatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUpdatedFormDigestOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExportWebOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportWebOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Sites() {
            this.Url = global::Sitecore.Sharepoint.Data.WebServices.Properties.Settings.Default.Sitecore_Sharepoint_Data_WebServices_SharepointSites_Sites;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetSiteTemplatesCompletedEventHandler GetSiteTemplatesCompleted;
        
        /// <remarks/>
        public event GetUpdatedFormDigestCompletedEventHandler GetUpdatedFormDigestCompleted;
        
        /// <remarks/>
        public event ExportWebCompletedEventHandler ExportWebCompleted;
        
        /// <remarks/>
        public event ImportWebCompletedEventHandler ImportWebCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/GetSiteTemplates", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public uint GetSiteTemplates(uint LCID, out Template[] TemplateList) {
            object[] results = this.Invoke("GetSiteTemplates", new object[] {
                        LCID});
            TemplateList = ((Template[])(results[1]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void GetSiteTemplatesAsync(uint LCID) {
            this.GetSiteTemplatesAsync(LCID, null);
        }
        
        /// <remarks/>
        public void GetSiteTemplatesAsync(uint LCID, object userState) {
            if ((this.GetSiteTemplatesOperationCompleted == null)) {
                this.GetSiteTemplatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSiteTemplatesOperationCompleted);
            }
            this.InvokeAsync("GetSiteTemplates", new object[] {
                        LCID}, this.GetSiteTemplatesOperationCompleted, userState);
        }
        
        private void OnGetSiteTemplatesOperationCompleted(object arg) {
            if ((this.GetSiteTemplatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSiteTemplatesCompleted(this, new GetSiteTemplatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/GetUpdatedFormDigest", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUpdatedFormDigest() {
            object[] results = this.Invoke("GetUpdatedFormDigest", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUpdatedFormDigestAsync() {
            this.GetUpdatedFormDigestAsync(null);
        }
        
        /// <remarks/>
        public void GetUpdatedFormDigestAsync(object userState) {
            if ((this.GetUpdatedFormDigestOperationCompleted == null)) {
                this.GetUpdatedFormDigestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUpdatedFormDigestOperationCompleted);
            }
            this.InvokeAsync("GetUpdatedFormDigest", new object[0], this.GetUpdatedFormDigestOperationCompleted, userState);
        }
        
        private void OnGetUpdatedFormDigestOperationCompleted(object arg) {
            if ((this.GetUpdatedFormDigestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUpdatedFormDigestCompleted(this, new GetUpdatedFormDigestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/ExportWeb", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ExportWeb(string jobName, string webUrl, string dataPath, bool includeSubwebs, bool includeUserSecurity, bool overWrite, int cabSize) {
            object[] results = this.Invoke("ExportWeb", new object[] {
                        jobName,
                        webUrl,
                        dataPath,
                        includeSubwebs,
                        includeUserSecurity,
                        overWrite,
                        cabSize});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ExportWebAsync(string jobName, string webUrl, string dataPath, bool includeSubwebs, bool includeUserSecurity, bool overWrite, int cabSize) {
            this.ExportWebAsync(jobName, webUrl, dataPath, includeSubwebs, includeUserSecurity, overWrite, cabSize, null);
        }
        
        /// <remarks/>
        public void ExportWebAsync(string jobName, string webUrl, string dataPath, bool includeSubwebs, bool includeUserSecurity, bool overWrite, int cabSize, object userState) {
            if ((this.ExportWebOperationCompleted == null)) {
                this.ExportWebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExportWebOperationCompleted);
            }
            this.InvokeAsync("ExportWeb", new object[] {
                        jobName,
                        webUrl,
                        dataPath,
                        includeSubwebs,
                        includeUserSecurity,
                        overWrite,
                        cabSize}, this.ExportWebOperationCompleted, userState);
        }
        
        private void OnExportWebOperationCompleted(object arg) {
            if ((this.ExportWebCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExportWebCompleted(this, new ExportWebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/ImportWeb", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ImportWeb(string jobName, string webUrl, string[] dataFiles, string logPath, bool includeUserSecurity, bool overWrite) {
            object[] results = this.Invoke("ImportWeb", new object[] {
                        jobName,
                        webUrl,
                        dataFiles,
                        logPath,
                        includeUserSecurity,
                        overWrite});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ImportWebAsync(string jobName, string webUrl, string[] dataFiles, string logPath, bool includeUserSecurity, bool overWrite) {
            this.ImportWebAsync(jobName, webUrl, dataFiles, logPath, includeUserSecurity, overWrite, null);
        }
        
        /// <remarks/>
        public void ImportWebAsync(string jobName, string webUrl, string[] dataFiles, string logPath, bool includeUserSecurity, bool overWrite, object userState) {
            if ((this.ImportWebOperationCompleted == null)) {
                this.ImportWebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportWebOperationCompleted);
            }
            this.InvokeAsync("ImportWeb", new object[] {
                        jobName,
                        webUrl,
                        dataFiles,
                        logPath,
                        includeUserSecurity,
                        overWrite}, this.ImportWebOperationCompleted, userState);
        }
        
        private void OnImportWebOperationCompleted(object arg) {
            if ((this.ImportWebCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportWebCompleted(this, new ImportWebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sharepoint/soap/")]
    public partial class Template {
        
        private int idField;
        
        private string titleField;
        
        private string nameField;
        
        private bool isUniqueField;
        
        private bool isHiddenField;
        
        private string descriptionField;
        
        private string imageUrlField;
        
        private bool isCustomField;
        
        private bool isSubWebOnlyField;
        
        private bool isRootWebOnlyField;
        
        private string displayCategoryField;
        
        private string filterCategoriesField;
        
        private bool hasProvisionClassField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool IsUnique {
            get {
                return this.isUniqueField;
            }
            set {
                this.isUniqueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool IsHidden {
            get {
                return this.isHiddenField;
            }
            set {
                this.isHiddenField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ImageUrl {
            get {
                return this.imageUrlField;
            }
            set {
                this.imageUrlField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool IsCustom {
            get {
                return this.isCustomField;
            }
            set {
                this.isCustomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool IsSubWebOnly {
            get {
                return this.isSubWebOnlyField;
            }
            set {
                this.isSubWebOnlyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool IsRootWebOnly {
            get {
                return this.isRootWebOnlyField;
            }
            set {
                this.isRootWebOnlyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DisplayCategory {
            get {
                return this.displayCategoryField;
            }
            set {
                this.displayCategoryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string FilterCategories {
            get {
                return this.filterCategoriesField;
            }
            set {
                this.filterCategoriesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool HasProvisionClass {
            get {
                return this.hasProvisionClassField;
            }
            set {
                this.hasProvisionClassField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetSiteTemplatesCompletedEventHandler(object sender, GetSiteTemplatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSiteTemplatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSiteTemplatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Template[] TemplateList {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Template[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetUpdatedFormDigestCompletedEventHandler(object sender, GetUpdatedFormDigestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUpdatedFormDigestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUpdatedFormDigestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ExportWebCompletedEventHandler(object sender, ExportWebCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExportWebCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExportWebCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ImportWebCompletedEventHandler(object sender, ImportWebCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportWebCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportWebCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591